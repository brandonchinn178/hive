version: 2

aliases:
  # build environment
  - &docker-linux
    docker:
      - image: centos:7
    working_directory: /root/src
    shell: bash -ex -o pipefail

  # caches
  - &build-ghc-cache-key
    run:
      name: Build cache key for ghc
      command: |
        FILES=(
          stack.yaml
          package.yaml
          scripts/install-system-deps.sh
          scripts/install-stack-deps.sh
        )
        cat "${FILES[@]}" > ghc-cache-key.txt
  - &build-ghcjs-cache-key
    run:
      name: Build cache key for ghcjs
      command: |
        FILES=(
          stack.yaml
          ghcjs/stack.yaml
          package.yaml
          scripts/install-system-deps.sh
          scripts/install-stack-deps.sh
        )
        cat "${FILES[@]}" > ghcjs-cache-key.txt
  - &ghc-cache-key
    v0-{{ checksum "ghc-cache-key.txt" }}
  - &ghcjs-cache-key
    v0.2-{{ checksum "ghcjs-cache-key.txt" }}

  # dependencies
  - &install-system-deps
    run:
      name: Build system dependencies
      command: scripts/install-system-deps.sh
  - &install-stack-deps
    run:
      name: Build stack dependencies
      command: scripts/install-stack-deps.sh
      no_output_timeout: 30m
  - &install-remote-deps
    run:
      name: Install dependencies for building remotely
      command: |
        scripts/install-terraform.sh

        # install aws cli
        curl -O https://bootstrap.pypa.io/get-pip.py
        python get-pip.py
        pip install awscli
        aws configure set region us-west-2

        # install ssh commands
        yum install -y openssh-clients

        # install git command
        yum install -y git

  # build steps
  - &run-build-ghc
    run:
      name: Build package
      command: stack build --test --no-run-tests
      no_output_timeout: 30m

  # ghcjs steps
  - &init-remote-server
    run:
      name: Spin up remote build server
      command: |
        terraform init
        terraform apply --auto-approve
        REMOTE_IP=$(terraform output ip)
        echo "export REMOTE_IP=${REMOTE_IP}" >> "$BASH_ENV"

        # setup ssh
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        aws s3 cp s3://hive-ci/hive-ci.pem ~/.ssh/
        chmod 600 ~/.ssh/hive-ci.pem
        cat >> ~/.ssh/config <<EOF
        Host ${REMOTE_IP}
            StrictHostKeyChecking no
            IdentityFile ~/.ssh/hive-ci.pem
        EOF
        chmod 400 ~/.ssh/config

        # wait for instance to boot up
        aws ec2 wait instance-status-ok --instance-ids "$(terraform output id)"
      working_directory: /root/src/.circleci/
  - &upload-remote-files
    run:
      name: Upload files for building remotely
      command: |
        git archive HEAD | gzip > repo.tar.gz

        FILES=(
            .circleci/run-remote-build.sh
            repo.tar.gz
        )
        if [[ -f ~/ghcjs-cache.tar.gz ]]; then
          FILES+=( ~/ghcjs-cache.tar.gz )
        fi
        scp "${FILES[@]}" "ec2-user@${REMOTE_IP}:~/"
  - &remote-build-ghcjs
    run:
      name: Build with ghcjs remotely
      command: ssh "ec2-user@${REMOTE_IP}" sudo ./run-remote-build.sh
      no_output_timeout: 30m
  - &download-ghcjs-artifacts
    run:
      name: Download GHCJS cache
      command: |
        scp "ec2-user@${REMOTE_IP}:~/everything.tar.gz" .
        tar xf everything.tar.gz
      working_directory: /root/
  - &destroy-remote-server
    run:
      name: Terminate remote build server
      command: terraform destroy --auto-approve
      working_directory: /root/src/.circleci/
      when: always

  # test steps
  - &run-hlint
    run:
      name: Run hlint
      command: scripts/hlint.sh
  - &run-stylish-haskell
    run:
      name: Run stylish-haskell
      command: scripts/stylish-haskell.sh

jobs:
  prebuild:
    <<: *docker-linux
    steps:
      - checkout
      - *build-ghc-cache-key
      - *build-ghcjs-cache-key
      - persist_to_workspace:
          root: .
          paths:
            - ghc-cache-key.txt
            - ghcjs-cache-key.txt

  build-ghc:
    <<: *docker-linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      # dependencies
      - restore_cache:
          key: *ghc-cache-key
      - *install-system-deps
      - *install-stack-deps
      - save_cache:
          key: *ghc-cache-key
          paths:
            - ~/.stack
            - ~/.ghcjs
            - /usr/local/bin
            - /usr/local/lib/node
      # build
      - *run-build-ghc
      - persist_to_workspace:
          root: .
          paths:
              - .stack-work

  build-ghcjs:
    <<: *docker-linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: *ghcjs-cache-key
      - *install-remote-deps
      - *init-remote-server
      - *upload-remote-files
      - *remote-build-ghcjs
      - *download-ghcjs-artifacts
      - *destroy-remote-server
      - save_cache:
          key: *ghcjs-cache-key
          paths:
            - ~/ghcjs-cache.tar.gz
      - store_artifacts:
          path: build.tar.gz

  lint:
    <<: *docker-linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: *ghc-cache-key
      - *run-hlint
      - *run-stylish-haskell

workflows:
  version: 2

  build_and_test:
    jobs:
      - prebuild
      - build-ghc:
          requires:
            - prebuild
      - build-ghcjs:
          requires:
            - prebuild
      - lint:
          requires:
            - build-ghc
